#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define TAM_NOME 20
#define TAM_CPF 12

typedef struct {
    char nome[TAM_NOME];
    char cpf[TAM_CPF];
    int idade;
    float altura;
} Individuo;

typedef struct No {
    Individuo dados;
    struct No* prox;
} No;

int validar_idade(int idade) {
    return idade >= 0 && idade <= 150;
}

int validar_altura(float altura) {
    return altura >= 0.0 && altura <= 3.0;
}

int validar_cpf(const char *cpf) {
    int i, soma = 0, resto;
    if (strlen(cpf) != 11) return 0;
    for (i = 0; i < 11; i++) {
        if (!isdigit(cpf[i])) return 0;
    }

    soma = 0;
    for (i = 0; i < 9; i++) {
        soma += (cpf[i] - '0') * (10 - i);
    }
    resto = soma % 11;
    int dig1 = (resto < 2) ? 0 : 11 - resto;
    if ((cpf[9] - '0') != dig1) return 0;

    soma = 0;
    for (i = 0; i < 10; i++) {
        soma += (cpf[i] - '0') * (11 - i);
    }
    resto = soma % 11;
    int dig2 = (resto < 2) ? 0 : 11 - resto;
    if ((cpf[10] - '0') != dig2) return 0;

    return 1;
}

void imprimir_lista(No* topo) {
    No* atual = topo;
    while (atual) {
        printf("%s - CPF: %s - Idade: %d - Altura: %.2f\n",
               atual->dados.nome, atual->dados.cpf,
               atual->dados.idade, atual->dados.altura);
        atual = atual->prox;
    }
    printf("---\n");
}

void empilhar(No** topo, Individuo ind) {
    No* novo = (No*)malloc(sizeof(No));
    novo->dados = ind;
    novo->prox = *topo;
    *topo = novo;
}

void desempilhar(No** topo) {
    if (*topo) {
        No* temp = *topo;
        *topo = (*topo)->prox;
        free(temp);
    }
}

void ordenar_por_idade(No* topo) {
    int trocou;
    do {
        trocou = 0;
        No* atual = topo;
        while (atual && atual->prox) {
            if (atual->dados.idade > atual->prox->dados.idade) {
                Individuo temp = atual->dados;
                atual->dados = atual->prox->dados;
                atual->prox->dados = temp;
                trocou = 1;
            }
            atual = atual->prox;
        }
        imprimir_lista(topo);
    } while (trocou);
}

void ordenar_por_altura(No* topo) {
    No *i, *j;
    for (i = topo; i && i->prox; i = i->prox) {
        No* min = i;
        for (j = i->prox; j; j = j->prox) {
            if (j->dados.altura < min->dados.altura) {
                min = j;
            }
        }
        if (min != i) {
            Individuo temp = i->dados;
            i->dados = min->dados;
            min->dados = temp;
        }
        imprimir_lista(topo);
    }
}

int main() {
    int n;
    printf("Bem vindo ao sistema de cadastros!\n");
    printf("Deseja cadastrar quantos individuos\n");
    scanf("%d", &n);

    Individuo* vetor = (Individuo*)malloc(n * sizeof(Individuo));

    for (int i = 0; i < n; i++) {
        printf("Cadastro do %d individuo:\n", i + 1);

        printf("Nome: ");
        scanf("%s", vetor[i].nome);

        do {
            printf("CPF (somente numeros): ");
            scanf("%s", vetor[i].cpf);
            if (!validar_cpf(vetor[i].cpf)) {
                printf("CPF invalido, tente novamente.\n");
            }
        } while (!validar_cpf(vetor[i].cpf));

        do {
            printf("Idade: ");
            scanf("%d", &vetor[i].idade);
            if (!validar_idade(vetor[i].idade)) {
                printf("Idade invalida, tente novamente.\n");
            }
        } while (!validar_idade(vetor[i].idade));

        do {
            printf("Altura: ");
            scanf("%f", &vetor[i].altura);
            if (!validar_altura(vetor[i].altura)) {
                printf("Altura invalida, tente novamente.\n");
            }
        } while (!validar_altura(vetor[i].altura));
    }

    No* pilha = NULL;
    for (int i = 0; i < n; i++) {
        empilhar(&pilha, vetor[i]);
    }
    free(vetor);

    desempilhar(&pilha);

    Individuo ana = {"Ana", "11111111111", 31, 1.67};
    Individuo pedro = {"Pedro", "22222222222", 45, 1.78};
    empilhar(&pilha, ana);
    empilhar(&pilha, pedro);

    printf("\nOrdenando por idade:\n");
    ordenar_por_idade(pilha);

    printf("\nOrdenando por altura:\n");
    ordenar_por_altura(pilha);

    return 0;
}
